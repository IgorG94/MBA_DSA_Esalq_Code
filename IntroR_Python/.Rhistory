attach(mtcars)
gear
detach(mtcars)
#Podemos acessar as observações com o uso semelhante do operador [ , ]:
mtcars[1, ]
#Assim, é possível acessar valores específicos ao combinarmos o aprendido:
mtcars[2, 1]
mtcars[4, 5]
#Podemos, ainda, combinar as posições com o nome das variáveis:
mtcars[1, "mpg"]
#Não podemos, porém, comandar o seguinte:
mtcars[, "mpg" : "disp"]
#E agora? A declaração abaixo funcionará?
mtcars[ ,c("mpg", "cyl", "disp")]
#Outra forma interessante de seleção de valores:
mtcars[, -c(3:11)]
#A função which() pode ser uma boa aliada na tarefa de seleção de valores.
#Vamos supor que a intenção seja que o R filtre todos os carros cujo valor para
#a variável mpg seja igual a 21:
mtcars[which(mtcars$mpg == 21.0), ]
#E se quiséssemos os carros cujo valor para a variável mpg seja diferente de 21:
mtcars[which(mtcars$mpg != 21.0), ]
#Carros cujo valor para a variável mpg seja igual a 21 E com a variável qsec
#menor do que 17:
mtcars[which(mtcars$mpg == 21.0 & mtcars$qsec < 17), ]
#Carros cujo valor para a variável mpg seja igual a 21 OU com a variável qsec
#menor do que 17:
mtcars[which(mtcars$mpg == 21.0 | mtcars$qsec < 17), ]
#O operador $ também é útil para criarmos variáveis:
mtcars$var_nova <- NA
head(mtcars)
#Ainda para criarmos variáveis, poderíamos declarar o seguinte:
mtcars["nova_var"] <- NA
head(mtcars)
mtcars$var_nova <- NULL
head(mtcars)
mtcars$nova_var <- NULL
head(mtcars)
#Ainda para criarmos variáveis, poderíamos declarar o seguinte:
mtcars["nova_var"] <- NA
mtcars["nova_var"] <- NULL
head(mtcars)
mtcars[1, 1] <- 82
mtcars[1, ]
mtcars$cyl <- gsub(x = mtcars$cyl,
pattern = 6,
replacement = 8)
head(mtcars)
mtcars <- edit(mtcars) #Utilizar o mouse e o teclado
mtcars[1, ]
#A função unique() é uma alternativa interessante de filtrar observações únicas.
#Para facilitar, vamos utilizar o dataset mtcars:
data("mtcars")
#Vamos salvar as 3 primeiras observaçoes do dataset mtcars num objeto novo
exemplo <- mtcars[1:3, ]
exemplo_final <- rbind(exemplo,
exemplo,
exemplo)
exemplo_final
#Aplicando a função unique():
unique(exemplo_final)
vetor <- 2
if(vetor > 1){
print("oi!")
}
#Porém:
if(vetor > 5){
print("oi!")
}
#Corrigindo:
if(vetor > 5){
print("oi!")
} else {
print("voltei!")
}
vetor <- 7
if(vetor > 8){
print("O objeto é maior do que 8")
}else if(vetor > 7){
print("O objeto é maior do que 7")
}else if(vetor > 6){
print("O objeto é maior que 6")
}else if(vetor > 5){
print("O objeto é maior do 5")
} else {
print("O objeto é maior do que 4")
}
print("O objeto é menor do que 4")
if(vetor > 4){
print("O objeto é maior do que 4")
}else if(vetor > 5){
print("O objeto é maior do que 5")
}else if(vetor > 6){
print("O objeto é maior que 6")
}else if(vetor > 7){
print("O objeto é maior do 7")
} else {
print("O objeto é menor do que 4")
}
print("O objeto é menor do que 4")
print("O objeto é maior que 6")
print("O objeto é maior do 7")
if(vetor > 8){
print("O objeto é maior do que 8")
}else if(vetor > 7){
print("O objeto é maior do que 7")
}else if(vetor > 6){
print("O objeto é maior do que 6")
}else if(vetor > 5){
print("O objeto é maior do que 5")
} else {
print("O objeto é maior do que 4")
}
if(vetor > 4){
print("O objeto é maior do que 4")
}else if(vetor > 5){
print("O objeto é maior do que 5")
}else if(vetor > 6){
print("O objeto é maior do que 6")
}else if(vetor > 7){
print("O objeto é maior do que 7")
} else {
print("O objeto é menor do que 4")
}
ifelse(vetor == 7,
yes = "o objeto é igual a 7",
no = "o objeto é diferente de 7")
y <- 10
for(i in 1:5){
print(y + i)
}
for(i in 1:5){
print(y + i)
}
y <- 10
for(i in 1:5){
print(y + i)
}
vetor_regioes <- c("norte", "nordeste", "sudeste", "sul", "centro-oeste")
for(regiao in vetor_regioes){
print(regiao)
}
z <- 0
while(z < 10){
print(z)
z <- z + 1
}
w <- 3
repeat{
print(w)
w <- w + 2
if(w > 18) break()
}
install.packages("proton")
library(proton)
# Iniciando o jogo ---------------------------------------------------------
proton()
# Como já dito, ao precisar de mais dicas, basta utilizar o argumento hint=T:
proton(hint = TRUE)
data("employees")
names("employees")
head("employees", n=2)
head(employees, n=2)
employees[which(employees$surname=='Insecure')]
employees[which(employees$surname=='Insecure'),]
which(employees$surname=='Insecure')
proton(action = "login", login="johnins")
data(""top1000passwords"")
data("top1000passwords")
head(top1000passwords, n=2)
for(password in top1000passwords){}
for(password in top1000passwords){}
for(password in top1000passwords){
if(proton(action='login', login='johnins', password=password))
}
for(password in top1000passwords){
proton(action='login', login='johnins', password=password)
}
# Se o aluno quiser saber, de fato, qual a senha do John Insecure, a rotina
# abaixo pode ser uma solução:
for(i in 1:length(top1000passwords)){
senha <- proton(action = "login",
login = "johnins",
password = top1000passwords[i])
if(senha == "Success! User is logged in!"){
print(top1000passwords[i])
break()
}
}
data("logs")
names(logs)
head(logs,2)
proton(action = "server", host="XYZ")
which(data$login='pietraszko')
which(data$login=='pietraszko')
which(logs$login=="pietraszko")
which(logs$login=="johnins")
logs[which(logs$login=="johnins"),]
logs_johnins <- logs[which(logs$login=="johnins"),]
table(logs_johnins$host)
sort(table(logs_johnins$host), 1)
sort(table(logs_johnins$host))
names(sort(table(logs_johnins$host)))
tail(names(sort(table(logs_johnins$host))),1)
proton(action='server', host='194.29.178.13')
head(employees, 2)
employees[which(employees$surname=='Pietraszko'),]
logs_johnins <- logs[which(logs$login=="slap"),]
tail(names(sort(table(logs_johnins$host))),1)
proton(action='server', host='194.29.178.16')
data("bash_history")
head(bash_history,2)
# Vamos verificar se faz sentido filtrar os comandos dados por Pietraszko.
length(unique(bash_history))
length(bash_history)
# Parece que faz sentido filtrar os comandos dados Pietraszko.
comandos_unicos <- unique(bash_history)
# Agora vamos filtrar os comandos que não possuem espaços, atribuindo o valor
# lógico NA para aqueles comandos que possuam espaços
comandos_sem_espaços <- gsub(pattern = " ",
replacement =  NA,
x = comandos_unicos)
# Finalmente, vamos solicitar que o R retorne os resultados presentes no objeto
# 'comandos_sem_espaços' que NÃO contenham os valores lógicos NA
comandos_sem_espaços[which(comandos_sem_espaços != NA)]
comandos_sem_espaços[which(is.na(comandos_sem_espaços) != T)]
proton(action = "login", login = "slap", password = "DHbb7QXppuHnaXGN")
library(tidyverse)
library(tidyverse)
library(plotly)
library(ggrepel)
library(PerformanceAnalytics)
library(reshape2)
0:100
load("fisman_miguel.RData")
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = violations)) +
geom_smooth(aes(x = corruption, y = violations),
se = FALSE,
method = "loess") +
geom_text(aes(x = corruption, y = violations, label = code))
library(tidyverse)
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = violations)) +
geom_smooth(aes(x = corruption, y = violations),
se = FALSE,
method = "loess") +
geom_text(aes(x = corruption, y = violations, label = code))
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = log(violations))) +
geom_smooth(aes(x = corruption, y = log(violations)),
se = F,
method = "loess") +
geom_text(aes(x = corruption, y = log(violations), label = code))
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = log(violations))) +
geom_smooth(aes(x = corruption, y = log(violations)),
se = F,
method = "loess") +
geom_text(aes(x = corruption, y = log(violations), label = code)) +
facet_wrap(~post) +
theme_bw()
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = log(violations))) +
geom_smooth(aes(x = corruption, y = log(violations)),
se = F, method = "loess") +
geom_text_repel(aes(x = corruption, y = log(violations), label = code)) +
facet_wrap(~post) +
theme_bw()
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = log(violations))) +
geom_smooth(aes(x = corruption, y = log(violations)),
se = F, method = "loess") +
geom_text_repel(aes(x = corruption, y = log(violations), label = code)) +
facet_wrap(~post) +
theme_bw()
```{r message=FALSE, warning=FALSE}
Dito isso, vamos comandar os pacotes necessários para essa aula:
```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(plotly)
library(ggrepel)
library(PerformanceAnalytics)
library(reshape2)
```
library(plotly)
library(tidyverse)
library(plotly)
library(ggrepel)
library(PerformanceAnalytics)
library(reshape2)
ggplot(fisman_miguel) +
geom_point(aes(x = corruption, y = log(violations))) +
geom_smooth(aes(x = corruption, y = log(violations)),
se = F, method = "loess") +
geom_text_repel(aes(x = corruption, y = log(violations), label = code)) +
facet_wrap(~post) +
theme_bw()
load("covid_110521.RData")
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases))
Note que não informamos para o ggplot2 que cada linha deveria representar um país. Assim:
```{r}
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country))
```
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country))
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country)) +
geom_point(aes(x = t, y = cumulative_cases, color = country)) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country))
covid_110521["log_ccases"] <- log10(covid_110521$cumulative_cases)
ggplot(covid_110521) +
geom_line(aes(x = t, y = log_ccases, color = country)) +
geom_point(aes(x = t, y = log_ccases, color = country)) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Log10 Casos Cumulativos",
color = "País") +
theme_bw()
covid_110521["pop_ccases"] <- covid_110521$cumulative_cases /
covid_110521$pop
ggplot(covid_110521) +
geom_line(aes(x = t, y = pop_ccases, color = country)) +
geom_point(aes(x = t, y = pop_ccases, color = country)) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country)) +
geom_point(aes(x = t, y = cumulative_cases, color = country)) +
geom_text(aes(x = t, y = cumulative_cases, label = cumulative_cases),
color = "black", size = 2) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country)) +
geom_point(aes(x = t, y = cumulative_cases, color = country)) +
geom_text(aes(x = t, y = cumulative_cases, label = cumulative_cases),
color = "black", size = 2, vjust = -1) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country)) +
geom_point(aes(x = t, y = cumulative_cases, color = country)) +
geom_text(aes(x = t, y = cumulative_cases, label = cumulative_cases),
color = "black", size = 2, vjust = -1, angle = 45) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country)) +
geom_point(aes(x = t, y = cumulative_cases, color = country)) +
geom_text_repel(aes(x = t, y = cumulative_cases, label = cumulative_cases),
color = "black", size = 2) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
ggplotly(
ggplot(covid_110521) +
geom_line(aes(x = t, y = cumulative_cases, color = country)) +
geom_point(aes(x = t, y = cumulative_cases, color = country)) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Cumulativos",
color = "País") +
theme_bw()
)
ggplotly(
ggplot(covid_110521) +
geom_line(aes(x = t, y = daily_cases, color = country)) +
geom_point(aes(x = t, y = daily_cases, color = country)) +
labs(x = "Tempo em dias desde o primeiro caso oficial do Sars-Cov-2 reportado",
y = "Casos Diários",
color = "País") +
theme_bw()
)
chart.Correlation(atlas_ambiental[, 3:11], histogram = T)
load("atlas_ambiental.RData")
chart.Correlation(atlas_ambiental[, 3:11], histogram = T)
matriz_correlacoes
matriz_correlacoes <- cor(atlas_ambiental[, 3:11])
matriz_correlacoes
correlacoes <- melt(matriz_correlacoes)
head(correlacoes)
tail(correlacoes)
names(correlacoes) <- c("var1", "var2", "correlacao")
correlacoes
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao))
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao)) +
labs(x = NULL,
y = NULL,
fill = "Correlações")
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao)) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "#440154FF",
mid = "white",
high = "#FDE725FF",
midpoint = 0)
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao)) +
geom_text(aes(x = var1, y = var2, label = correlacao), size = 2) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "darkblue",
mid = "white",
high = "darkred",
midpoint = 0)
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao)) +
geom_text(aes(x = var1, y = var2, label = round(correlacao, digits = 3)),
size = 3) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "darkblue",
mid = "white",
high = "darkred",
midpoint = 0) +
theme_bw()
ggplotly(
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao)) +
geom_text(aes(x = var1, y = var2,
label = round(correlacao, digits = 3)),
size = 3) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "darkblue",
mid = "white",
high = "darkred",
midpoint = 0) +
theme_bw()
)
ggplot(correlacoes) +
geom_tile(aes(x = var1, y = var2, fill = correlacao)) +
geom_text(aes(x = var1, y = var2, label = round(correlacao,
digits = 3)),
size = 3) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "darkblue",
mid = "white",
high = "darkred",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 90))
atlas_long <- melt(atlas_ambiental[, 2:11], id.vars = "distritos")
head(atlas_long)
tail(atlas_long)
ggplot(atlas_long) +
geom_boxplot(aes(x = variable, y = value, fill = variable))
atlas_padronizado <- atlas_ambiental
atlas_padronizado[, 3:11] <- scale(atlas_padronizado[, 3:11])
head(atlas_padronizado)
atlas_padronizado_long <- melt(atlas_padronizado[, 2:11],
id.vars = "distritos")
head(atlas_padronizado_long)
ggplot(atlas_padronizado_long) +
geom_boxplot(aes(x = variable, y = value, fill = variable))
ggplot(atlas_padronizado_long) +
geom_boxplot(aes(x = variable, y = value, fill = variable)) +
labs(x = "Variáveis",
y = "Valores") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "none",
axis.text.x = element_text(angle = 90))
ggplot(atlas_padronizado_long) +
geom_boxplot(aes(x = variable, y = value, fill = variable)) +
geom_point(aes(x = variable, y = value), alpha = 0.1) +
labs(x = "Variáveis",
y = "Valores") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "none",
axis.text.x = element_text(angle = 90))
ggplotly(
ggplot(atlas_padronizado_long) +
geom_boxplot(aes(x = variable, y = value, fill = variable)) +
labs(x = "Variáveis",
y = "Valores") +
theme_bw()
)
load("atlas_ambiental.RData")
2+1
ls()
write.csv(atlas_ambiental, 'atlas_ambiental.csv')
